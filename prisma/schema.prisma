generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String     @id @default(cuid())
  title       String
  description String
  user        User       @relation(fields: [userId], references: [id])
  club        Club       @relation(fields: [clubId], references: [id])
  userId      String
  clubId      String
  reactions   Reaction[]

  createdAt DateTime @default(now())
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  course        Course?    @relation(fields: [courseId], references: [id])
  courseId      String?
  club          Club[]
  userClub      UserClub[]
  resume        Resume[]
  reactions     Reaction[]
  Post          Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id   String @id @default(uuid())
  name String
  user User[]
}

model Club {
  id          String       @id @default(uuid())
  name        String
  icon        String       @default("default")
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  inviteLink  InviteLink[]
  owner       User         @relation(fields: [userId], references: [id])
  users       UserClub[]
  userId      String
  Post        Post[]
}

model UserClub {
  club   Club   @relation(fields: [clubId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  clubId String
  userId String

  createdAt DateTime @default(now())

  @@id([clubId, userId])
}

model InviteLink {
  id             String   @id @default(uuid())
  club           Club     @relation(fields: [clubId], references: [id])
  createdAt      DateTime @default(now())
  expirationDate DateTime
  clubId         String
}

model Resume {
  id   String @id @default(uuid())
  isbn String
  user User   @relation(fields: [userId], references: [id])

  userId    String
  reactions Reaction[]

  title   String
  content String
}

model Reaction {
  id String @id @default(uuid())

  user   User    @relation(fields: [userId], references: [id])
  resume Resume? @relation(fields: [resumeId], references: [id])
  post   Post?   @relation(fields: [postId], references: [id])

  userId   String
  resumeId String?
  postId   String?
}
